Migrations
==========

Applying migrations is done just by running `./manage.py migrate`, when running
against a dev database or when deployed. It won't apply migrations twice so you
can run it every time you start it locally/in a docker container

Migration policy
----------------

From `original issue
<https://code.zoetrope.io/RTR-services/rtr-django-app/issues/39>`__:

Reading:

- `Django Migration Donâ€™ts <https://engineering.edx.org/django-migration-donts-f4588fd11b64?source=linkShare-87c196ab5d15-1510108699>`__
- `Zero downtime deploys: A tale of Django migrations <http://lucasroesler.com/2017/02/zero-downtime-deploys-a-tale-of-django-migrations/>`__
- `Everything About Database Migrations <https://openedx.atlassian.net/wiki/spaces/OpenDev/pages/23003228/Everything+About+Database+Migrations>`__

In order to have zero-downtime deployments / migrations, we need to be a bit
careful with django migrations (or use something sketchy to do this for us [3]_).

Assuming we have multiple django instances running in k8s.

All migrations should be backwards compatible. This means you should only add
columns in a migration if possible, not remove them.

The following processes basically match openedx's procedure [2]_

In order to remove a column, the process will be as follows:

- 1) Remove the column from the model
- 2) Do not generate a migration, but create an issue to do so later.
- 3) Deploy the code.
- 4) After new code is running on all instances, generate a migration, which can
be run on the next deployment.

To add a column, the process is:

- 1) Add the column to the model
- 2) Generate the migration
- 3) Deploy

If we do need to do a complex migration that can't be done in a backwards
compatible way, then this must be done with downtime.

.. [2] https://openedx.atlassian.net/wiki/spaces/OpenDev/pages/23003228/Everything+About+Database+Migrations
.. [3] https://github.com/Smosker/zero-downtime-migrations

Adding migrations
------------------

Docs:

- `Migrations <https://docs.djangoproject.com/en/2.0/topics/migrations/>`__
- `Writing migrations <https://docs.djangoproject.com/en/2.0/howto/writing-migrations/>`__

The current migrations were autogenerated by django then the names slightly
modified so that they are more descriptive of the operation they are actually
doing.

You should almost never have to actually do it, but if you need to add a new
migrations:

1. Run ``./manage.py makemigrations [module]`` and it will add a new file in the
``migrations`` folder for that module with a name like ``0004_auto_33_6644.py``.

2. Change the name to something better like ``0004_add_extra_billing_field.py``
and possibly add some documentation or a comment in the file to say why it was
needed

3. Stop git ignoring it by adding ``!0004_add_extra_billing_field.py`` to the
git ignore file in the folder

4. ``git add`` it and push.
