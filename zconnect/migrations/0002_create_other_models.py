# -*- coding: utf-8 -*-
# Generated by Django 1.11.13 on 2018-05-04 13:51
from __future__ import unicode_literals

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import jsonfield.fields
import zconnect._models.mixins


class Migration(migrations.Migration):

    dependencies = [
        ('organizations', '0002_model_update'),
        migrations.swappable_dependency(settings.ZCONNECT_DEVICE_MODEL),
        ('zconnect', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_seen', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(max_length=50)),
                ('online', models.BooleanField(default=False)),
                ('fw_version', models.CharField(blank=True, max_length=50)),
                ('orgs', models.ManyToManyField(blank=True, help_text="Organizations that 'own' this device", related_name='device_set', related_query_name='device', to='organizations.Organization', verbose_name='organizations')),
            ],
            options={
                'ordering': ['product'],
                'default_permissions': ['view', 'change', 'add', 'delete'],
                'swappable': 'ZCONNECT_DEVICE_MODEL',
            },
            bases=(zconnect._models.mixins.EventDefinitionMixin, models.Model),
        ),
        migrations.CreateModel(
            name='DeviceUpdateStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('time', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.CharField(max_length=500)),
                ('attempted', models.BooleanField(default=False)),
                ('success', models.BooleanField(default=False)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ZCONNECT_DEVICE_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('success', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EventDefinition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('enabled', models.BooleanField(default=True)),
                ('ref', models.CharField(max_length=100)),
                ('condition', models.CharField(max_length=100)),
                ('actions', jsonfield.fields.JSONField()),
                ('debounce_window', models.IntegerField(default=600)),
                ('scheduled', models.BooleanField(default=False)),
                ('single_trigger', models.BooleanField(default=False)),
                ('device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_defs', to=settings.ZCONNECT_DEVICE_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=100)),
                ('timezone', models.CharField(blank=True, max_length=50)),
                ('latitude', models.FloatField(blank=True, validators=[django.core.validators.MinValueValidator(-90.0), django.core.validators.MaxValueValidator(90.0)])),
                ('longitude', models.FloatField(blank=True, validators=[django.core.validators.MinValueValidator(-180.0), django.core.validators.MaxValueValidator(180.0)])),
                ('organization', models.CharField(blank=True, max_length=50)),
                ('country', models.CharField(max_length=100)),
                ('locality', models.CharField(blank=True, max_length=50)),
                ('region', models.CharField(max_length=100)),
                ('poboxno', models.CharField(blank=True, max_length=50)),
                ('postalcode', models.CharField(max_length=20)),
                ('street_address', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'ordering': ['country'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('iot_name', models.CharField(max_length=100)),
                ('sku', models.CharField(blank=True, max_length=100)),
                ('manufacturer', models.CharField(max_length=50)),
                ('url', models.CharField(blank=True, max_length=200)),
                ('support_url', models.CharField(blank=True, max_length=200)),
                ('version', models.CharField(max_length=50)),
                ('periodic_data', models.BooleanField(default=True)),
                ('periodic_data_interval_short', models.IntegerField(default=120)),
                ('periodic_data_num_intervals_short', models.IntegerField(default=180)),
                ('periodic_data_interval_long', models.IntegerField(default=21600)),
                ('periodic_data_num_intervals_long', models.IntegerField(default=112)),
                ('periodic_data_retention_short', models.IntegerField(default=2592000)),
                ('server_side_events', models.BooleanField(default=False)),
                ('battery_voltage_full', models.FloatField()),
                ('battery_voltage_critical', models.FloatField()),
                ('battery_voltage_low', models.FloatField()),
                ('previous_version', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='zconnect.Product')),
            ],
            options={
                'ordering': ['manufacturer'],
            },
            bases=(zconnect._models.mixins.EventDefinitionMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ProductFirmware',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('download_url', models.CharField(max_length=20)),
                ('major', models.IntegerField()),
                ('minor', models.IntegerField()),
                ('patch', models.IntegerField()),
                ('prerelease', models.CharField(blank=True, max_length=20)),
                ('build', models.CharField(blank=True, max_length=20)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zconnect.Product')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductPreprocessors',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('preprocessor_name', models.CharField(max_length=100)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='preprocessors', to='zconnect.Product')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductTags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tag', models.CharField(max_length=20)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tags', to='zconnect.Product')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TimelineEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ts', models.DateTimeField(default=datetime.datetime.utcnow)),
                ('message', models.CharField(max_length=100)),
                ('severity', models.IntegerField(choices=[(0, 'notset'), (10, 'debug'), (20, 'info'), (30, 'warning'), (40, 'error'), (50, 'critical')], default=0)),
                ('category', models.CharField(max_length=50)),
                ('try_notify', models.BooleanField()),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zconnect.Event')),
            ],
            options={
                'ordering': ('-ts',),
                'get_latest_by': 'ts',
            },
        ),
        migrations.CreateModel(
            name='UpdateExecution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('strategy_class', models.CharField(max_length=30)),
                ('enabled', models.BooleanField(default=False)),
                ('product_firmware', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='zconnect.ProductFirmware')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='eventdefinition',
            name='product',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_defs', to='zconnect.Product'),
        ),
        migrations.AddField(
            model_name='event',
            name='definition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event', to='zconnect.EventDefinition'),
        ),
        migrations.AddField(
            model_name='event',
            name='device',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.ZCONNECT_DEVICE_MODEL),
        ),
        migrations.AddField(
            model_name='deviceupdatestatus',
            name='execution',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='failed_updates', to='zconnect.UpdateExecution'),
        ),
        migrations.AddField(
            model_name='device',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='zconnect.Product'),
        ),
    ]
